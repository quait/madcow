
*** general

- clean up exception classes and usage.  we need to subclass Exception
  and use consistent catches (Exception as error instead of Exception as e)
- docstrings on any function or class missing them.
- change re_ names to use _re at the end, for consistency.
- indentation line-up rules based on PEP8
- improve anti-abuse settings.. need to keep track of global module
  invocations and throttle people who spam the bot.  Right now, a malicious
  user can use the bot to DDOS various websites, burn all cpu/bandwidth on
  the machine, or just annoy people in general.
- make irc logging show both events and bots own output.
- support postgres!
- currently, various classes and functions madcow relies on are split
  haphazardly between madcow.py, include/utils.py, and include/gateway.py.
  Need to make more sense of this.  Perhaps move EVERYTHING but Madcow
  base class into a separate module?
- variable naming: many functions have camel casing for no good reason other
  than halfway through writing madcow I changed my preference for variable
  naming.  Need to go through and make this consistent, aka nuke camelCases.
- Line length:  another mid-write preference change.  Need to go through code
  and make it 80-column friendly as per PEP8.
- better testing framework, perhaps even proper unit testing.  Just testing
  that the various modules work is not enough anymore.  Too much stuff can
  break with small changes.

*** 2to3

- wiki.py is returning unicode instead of raw data.  For consistency, in
  2.x, we need ALL modules to return raw bytes.  This will of course change
  in 3.0.
- SQLObject is still using deprecated code.  Do we really need
  an object model for ONE small application, or would using raw
  SQL be acceptable just to remove a third-party dependency?  It would
  remove a few big headaches in one blow.  Because simplejson is going away,
  removing this would make nearly every module use the stdlib.
- twitter will need to use stdlib json instead of third-party
  simplejson.  Google may provide an update for this, but keep in mind that
  we've patched twitter.py in multiple ways already.
- need to refactor bytes vs. str usage, which is currently str vs.
  unicode.  In 2.x, we deal with raw bytes, convert to unicode based
  on what we think (or detect) the encoding to be, then encode to raw bytes
  based on the config file's encoding.  In 3.x we will need to perform
  the raw bytes->unicode conversion at the plugin source, deal with unicode
  internally, and encode to raw bytes ONLY before writing to sockets.  In
  theory this should work out better, but it will require serious refactoring.
- useragent will need to be totally rewritten to take advantage of urllib
  reorganization.

*** optimizations

- convert filter and map functions to use list comprehensions per psyco
  recommendation.
